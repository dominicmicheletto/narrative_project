<I c="SocialSuperInteraction" i="interaction" m="interactions.social.social_super_interaction" n="vampire_DrinkDeeply" s="150058">
  <!-- This line prevents that the user can cancel the interaction. Once this interaction is started, it cannot be cancelled. -->
  <V n="_cancelable_by_user" t="prohibit_cancelation" />
  <!-- This configures what the icon will be in the interaction queue for the Sim -->
  <V n="_icon" t="participant">
    <U n="participant">
      <L n="participant_type">
        <E>TargetSim</E>
      </L>
    </U>
  </V>
  <!-- To be honest, not sure what this does really, but it's not super important -->
  <L n="_party_size_weight_tuning">
    <U>
      <T n="y">100</T>
    </U>
    <U>
      <T n="x">1</T>
      <T n="y">100</T>
    </U>
    <U>
      <T n="x">2</T>
      <T n="y">50</T>
    </U>
    <U>
      <T n="x">3</T>
      <T n="y">0</T>
    </U>
    <U>
      <T n="x">4</T>
    </U>
  </L>
  <!-- This allows for the interaction to be "saved": if this was the last interaction run between save and start up, this interaction will resume -->
  <V n="_saveable" t="enabled" />
  <T n="_social_group_type">151431<!--JigGroup: group_VampireDrink--></T>
  <!-- This "pushes" the affordance onto the target Sim. Many interactions are actually several interactions that are connected together in a similar fashion.  -->
  <V n="affordance_to_push_on_target" t="push_affordance">
    <T n="push_affordance">150448<!--SocialSuperInteraction: vampire_Drink_Target--></T>
  </V>
  <T n="allow_autonomous">False</T>
  <T n="attention_cost">0</T>
  <!-- This was the main part of the code which was modified. The "basic_content" of an interaction defines what happens during its run and "flexible_length" means that 
  the duration of it can vary. -->
  <V n="basic_content" t="flexible_length">
    <U n="flexible_length">
	  <!-- This part controls the duration of the interaction based on conditions of the Sim performing it -->
      <L n="conditional_actions">
        <V t="literal">
          <U n="literal">
            <L n="conditions">
              <V t="time_based">
                <U n="time_based">
				  <!-- This interaction can last between 15 and 17 Sim minutes... -->
                  <T n="max_time">17</T>
                  <T n="min_time">15</T>
                </U>
              </V>
            </L>
            <E n="interaction_action">EXIT_NATURALLY</E>
			<!-- If the Actor Sim (the vampire) does NOT have the following buff -->
            <L n="tests">
              <L>
                <V t="buff">
                  <U n="buff">
                    <L n="blacklist">
					  <!-- This is the buff Vampires get when they have a -->
                      <T>152484<!--Buff: buff_Vampire_Weaknesses_InefficientDrinker--></T>
                    </L>
                  </U>
                </V>
              </L>
            </L>
          </U>
        </V>
        <!-- The following block is similar to the one above, but for Vampires who DO have the inefficient drinker buff.
			 This makes it so that the interaction is significantly longer for them (about twice as long). -->
		<V t="literal">
          <U n="literal">
            <L n="conditions">
              <V t="time_based">
                <U n="time_based">
                  <T n="max_time">30</T>
                  <T n="min_time">25</T>
                </U>
              </V>
            </L>
            <E n="interaction_action">EXIT_NATURALLY</E>
            <L n="tests">
              <L>
                <V t="buff">
                  <U n="buff">
                    <V n="whitelist" t="enabled">
                      <L n="enabled">
                        <T>152484<!--Buff: buff_Vampire_Weaknesses_InefficientDrinker--></T>
                      </L>
                    </V>
                  </U>
                </V>
              </L>
            </L>
          </U>
        </V>
      </L>
      <!-- The basic content of an interaction is what animation will be played. In this case, it's an animation specifically for "plasma" sucking-->
	  <V n="content" t="looping_content">
        <U n="looping_content">
          <U n="animation_ref">
            <T n="factory">150033<!--AnimationElement: socials_Vampire_DrinkDeeply--></T>
          </U>
        </U>
      </V>
      <!-- During the animation that plays, statistics ("commodities") will be changed. -->
	  <V n="periodic_stat_change" t="enabled">
        <U n="enabled">
          <L n="operations">
            <V t="statistic_change">
              <U n="statistic_change">
                <T n="amount">10</T> <!-- The amount -->
                <L n="subject">
                  <E>Actor</E> <!-- Whom this change will be applied to -->
                </L>
                <E n="periodic_change_behavior">APPLY_AT_INTERVAL_ONLY</E> <!-- Only increase the stat after each discreet repeat of the animation -->
                <T n="stat">10180201301905630286<!--Commodity: LeRoiDeTout:commodity_Bloodiness_Vampire--></T> <!-- My own commodity which controls the bloodiness of vampires -->
                <!-- The test conditions under which the stat change can occur -->
				<L n="tests">
                  <L>
                    <V t="buff">
                      <U n="buff">
                        <V n="whitelist" t="enabled">
                          <L n="enabled">
                            <T>151090<!--Buff: buff_Vampire_DrinkInProgress--></T> <!-- The Actor must have this buff -->
                          </L>
                        </V>
                      </U>
                    </V>
                    <V t="buff">
                      <U n="buff">
                        <L n="blacklist">
                          <T>11015383343424889968<!--Buff: LeRoiDeTout:buff_Vampire_DrinkInProgress_DelayBloodiness--></T><!-- And not have this buff -->
                        </L>
                      </U>
                    </V>
                  </L>
                </L>
              </U>
            </V>
			<!-- The rest of these tuning changes are similar as the one above, but for the purposes of this project, only the one above will be discussed. -->
            <V t="statistic_change">
              <U n="statistic_change">
                <T n="amount">10</T>
                <L n="subject">
                  <E>TargetSim</E>
                </L>
                <E n="periodic_change_behavior">APPLY_AT_INTERVAL_ONLY</E>
                <T n="stat">10741513282212287484<!--Commodity: LeRoiDeTout:commodity_Bloodiness_Victim--></T>
                <L n="tests">
                  <L>
                    <V t="buff">
                      <U n="buff">
                        <E n="subject">TargetSim</E>
                        <V n="whitelist" t="enabled">
                          <L n="enabled">
                            <T>151090<!--Buff: buff_Vampire_DrinkInProgress--></T>
                          </L>
                        </V>
                      </U>
                    </V>
                    <V t="buff">
                      <U n="buff">
                        <E n="subject">TargetSim</E>
                        <L n="blacklist">
                          <T>13275940036109991087<!--Buff: LeRoiDeTout:buff_Vampire_DrinkInProgress_DelayBloodiness_Victim--></T>
                        </L>
                      </U>
                    </V>
                  </L>
                </L>
              </U>
            </V>
            <V t="statistic_change">
              <U n="statistic_change">
                <T n="amount">-6</T>
                <T n="stat">16654<!--Commodity: motive_Energy--></T>
                <L n="subject">
                  <E>TargetSim</E>
                </L>
                <L n="tests">
                  <L>
                    <V t="buff">
                      <U n="buff">
                        <E n="subject">TargetSim</E>
                        <V n="whitelist" t="enabled">
                          <L n="enabled">
                            <T>151090<!--Buff: buff_Vampire_DrinkInProgress--></T>
                          </L>
                        </V>
                      </U>
                    </V>
                  </L>
                </L>
              </U>
            </V>
            <V t="statistic_change">
              <U n="statistic_change">
                <T n="amount">8.823</T>
                <T n="stat">149541<!--Commodity: commodity_Motive_Visible_Vampire_Thirst--></T>
                <L n="tests">
                  <L>
                    <V t="buff">
                      <U n="buff">
                        <V n="whitelist" t="enabled">
                          <L n="enabled">
                            <T>151090<!--Buff: buff_Vampire_DrinkInProgress--></T>
                          </L>
                        </V>
                      </U>
                    </V>
                  </L>
                </L>
              </U>
            </V>
            <V t="statistic_change">
              <U n="statistic_change">
                <T n="amount">1.5</T>
                <E n="periodic_change_behavior">APPLY_AT_INTERVAL_ONLY</E>
                <T n="stat">150071<!--RankedStatistic: rankedStatistic_Occult_VampireXP--></T>
              </U>
            </V>
            <V t="statistic_set_max">
              <U n="statistic_set_max">
                <T n="stat">125579<!--Commodity: commodity_Buff_InsiderTrait_MissHangingOut--></T>
                <L n="tests">
                  <L>
                    <V t="relationship">
                      <U n="relationship">
                        <U n="relationship_score_interval">
                          <T n="lower_bound">35</T>
                          <T n="upper_bound">100</T>
                        </U>
                        <L n="target_sim">
                          <E>TargetSim</E>
                        </L>
                      </U>
                    </V>
                    <V t="trait">
                      <U n="trait">
                        <L n="whitelist_traits">
                          <T>125437<!--Trait: trait_Insider--></T>
                        </L>
                      </U>
                    </V>
                  </L>
                </L>
              </U>
            </V>
          </L>
        </U>
      </V>
    </U>
  </V>
  <!-- A basic extra does "extra" things during the running of an interaction outside of its outcome -->
  <L n="basic_extras">
    <!-- The following loot and buff are part of every SocialSuperInteraction. I really don't know why. -->
    <V t="loot">
      <U n="loot">
        <L n="loot_list">
          <T>162659<!--LootActions: loot_Commodity_Culling_GhostAdd_target--></T>
        </L>
      </U>
    </V>
    <V t="buff">
      <U n="buff">
        <U n="buff_type">
          <V n="buff_reason" t="enabled">
            <T n="enabled">0x9C09275F<!--(From Being in a social group with at least 3 Sims)--></T>
          </V>
          <T n="buff_type">125555<!--Buff: buff_Trait_WithMyFriends--></T>
        </U>
        <L n="subject">
          <E>Actor</E>
          <E>SocialGroupSims</E>
          <E>TargetSim</E>
        </L>
        <L n="tests">
          <L>
            <V t="social_group">
              <U n="social_group">
                <V n="threshold" t="enabled">
                  <U n="enabled">
                    <T n="value">3</T>
                  </U>
                </V>
              </U>
            </V>
          </L>
        </L>
      </U>
    </V>
    <!-- Run the following loots at the beginning of the interaction -->
	<V t="loot">
      <U n="loot">
        <L n="loot_list">
          <T>151092<!--LootActions: loot_VampireDrinkInProgress--></T>
        </L>
        <V n="timing" t="at_beginning" />
      </U>
    </V>
    <V t="loot">
      <U n="loot">
        <L n="loot_list">
          <T>151955<!--LootActions: loot_VampireDrink_PreOutcome_DrinkDeeply--></T>
        </L>
        <V n="timing" t="at_beginning" />
      </U>
    </V>
    <!-- A broadcaster "broadcasts" something. In this case, it makes other Sims "aware" that a Sim is being drank from by a Vampire. -->
	<V t="broadcaster">
      <U n="broadcaster">
        <L n="broadcaster_types">
          <U>
            <T n="item">154403<!--Broadcaster: broadcaster_Vampire_DrinkDeeply--></T>
          </U>
        </L>
        <V n="offset_time" t="enabled">
          <T n="enabled">5</T> <!-- This broadcast happens 5 Sim minutes after the start of the interaction -->
        </V>
      </U>
    </V>
    <!-- More loots and broadcasters that deal with a reputation lost if a Vampire is caught drinking from a Sim -->
	<V t="loot">
      <U n="loot">
        <L n="loot_list">
          <T>195286<!--LootActions: loot_DramaNode_Reputation_Dialog_Bad_CaughtTakingBlood--></T>
        </L>
      </U>
    </V>
    <V t="broadcaster">
      <U n="broadcaster">
        <L n="broadcaster_types">
          <U>
            <T n="item">201362<!--Broadcaster: broadcaster_Reputation_SeenLoot_Looping_Loss_Medium--></T>
          </U>
        </L>
      </U>
    </V>
  </L>
  <V n="basic_reserve_object" t="disabled" />
  <V n="content_score" t="disabled" />
  <T n="display_name">0x9A943914<!--Drink Deeply--></T> <!-- The name of the interaction in the pie menu -->
  <!-- Kind of boilerplate code, makes it so that the interaction has "access" to the Actor's name. Almost every interaction has this. -->
  <U n="display_name_text_tokens">
    <L n="tokens">
      <V t="participant_type">
        <U n="participant_type">
          <V n="objects" t="from_participant">
            <U n="from_participant">
              <E n="participant">Actor</E>
            </U>
          </V>
        </U>
      </V>
      <V t="participant_type">
        <U n="participant_type">
          <V n="objects" t="from_participant">
            <U n="from_participant">
              <E n="participant">Object</E>
            </U>
          </V>
        </U>
      </V>
    </L>
  </U>
  <!-- The animation to play when Sims are idling, which is to say, before the interaction can occur -->
  <V n="idle_animation" t="enabled">
    <U n="enabled">
      <T n="factory">11570<!--AnimationElement: Listen_Listen_Looping_basic--></T>
    </U>
  </V>
  <T n="ignore_group_socials">False</T>
  <!-- These are "tags" which are used by the game, but otherwise have no visible effect. -->
  <L n="interaction_category_tags">
    <E>Interaction_SocialSuper</E>
    <E>Interaction_Super</E>
    <E>Interaction_All</E>
    <E>Interaction_SocialAll</E>
    <E>Interaction_Social_Touching</E>
    <E>Interaction_Social_Contagious</E>
  </L>
  <!-- The Vampire will be invited into the house of the Sim they drink from after this interaction runs -->
  <T n="invite_in_after_interaction">True</T>
  <!-- The animation used when the target is "listening" to the actor -->
  <U n="listen_animation">
    <T n="factory">11570<!--AnimationElement: Listen_Listen_Looping_basic--></T>
  </U>
  <!-- The outcome of an interaction states what happens when it is done -->
  <V n="outcome" t="single">
    <U n="single">
      <U n="actions">
	    <!-- A continuation pushes a new interaction upon a Sim. -->
        <L n="continuation">
          <U>
            <E n="actor">TargetSim</E> <!-- Whom to push the interaction on -->
            <T n="affordance">154218<!--SuperInteraction: sim_EnergyFailure_FromPlasmaLoss--></T> <!-- The interaction to push. In this case, passing out -->
            <E n="target">Invalid</E> <!-- Whom is marked as the target; in this case, there is none. -->
          </U>
        </L>
        <T n="force_outcome_on_exit">True</T> <!-- Forces the interaction to occur, even if something would otherwise prevent it -->
		<!-- A list of loots to apply. For the most part, these are not important and just deal with the outcome of drinking from a Sim. -->
        <L n="loot_list">
          <T>151772<!--LootActions: loot_VampireDrinkDeeply--></T>
          <T>151558<!--LootActions: loot_VampireDrink_TastySim--></T>
          <T>152617<!--LootActions: loot_Weaknesses_VampireWithAConscience_GuiltyDrinker--></T>
          <T>155493<!--LootActions: loot_Aspiration_Reset_DoNotDrinkDeeplyTracker--></T>
          <T>155653<!--LootActions: loot_Aspiration_Reset_DoNotDrinkWithoutPermissionTracker--></T>
          <T>155910<!--LootActions: loot_MindPowers_Nighttime_Mesmerize_Remove--></T>
          <T>156626<!--LootActions: loot_Vampire_InitialNightTimeVisit_Notification--></T>
          <T>206137<!--LootActions: loot_InfectedFruit_Vampire_Drink--></T>
        </L>
      </U>
    </U>
  </V>
  <!-- -->
  <U n="post_run_autonomy_commodities">
    <L n="requests">
      <U>
        <T n="ignore_user_directed_and_autonomous">True</T>
        <T n="retain_context_source">True</T>
        <T n="same_target_only">True</T>
        <L n="static_commodities">
          <T>152440<!--StaticCommodity: staticCommodity_Vampire_ChangeOutOfDarkForm--></T>
        </L>
      </U>
    </L>
  </U>
  <!-- This adds a commodity to the Sim which affects their autonomy, before the interaction is run. In this case, it makes them want to switch to their "dark form". -->
  <L n="pre_add_autonomy_commodities">
    <U>
      <T n="ignore_user_directed_and_autonomous">True</T>
      <T n="retain_context_source">True</T>
      <T n="same_target_only">True</T>
      <L n="static_commodities">
        <T>152405<!--StaticCommodity: staticCommodity_Vampire_ChangeIntoDarkForm--></T>
      </L>
    </U>
  </L>
  <!-- When enabled, there will be a "progress bar" in the interaction queue dictating how much longer the interaction has before being completed. -->
  <U n="progress_bar_enabled">
    <T n="bar_enabled">False</T>
  </U>
  <T n="relationship_scoring">True</T>
  <E n="scoring_priority">NORMAL</E>
  <!-- This determines which "postures" nearby Sims this interaction has a "preference for" occurring around -->
  <V n="sim_affinity_posture_scoring_data" t="enabled">
    <U n="enabled">
      <L n="my_scoring">
        <U>
          <V n="affinity_strategy" t="relationship_based" />
          <T n="negate_tag">True</T>
          <E n="running_interaction_tag">Sleeping</E> <!-- Avoid sleeping Sims that you know -->
        </U>
        <U>
          <V n="affinity_strategy" t="avoid" />
          <E n="running_interaction_tag">Very_Loud</E> <!-- Avoid "loud" interactions -->
        </U>
      </L>
	  <!-- Tags this interaction itself has -->
      <L n="my_tags">
        <E>Loud</E>
        <E>Chat</E>
      </L>
    </U>
  </V>
  <T n="subaction_selection_weight">1</T>
  <!-- This interaction is incompatible with any other Super Affordance -->
  <V n="super_affordance_compatibility" t="literal">
    <U n="literal">
      <V n="default_inclusion" t="exclude_all" />
    </U>
  </V>
  <!-- Whom is being "targeted". Because this is a Social interaction, the target is the Sim who was selected. -->
  <E n="target_type">TARGET</E>
  <!-- Global tests determine for whom this interaction is valid. -->
  <L n="test_globals">
    <V t="sim_info">
      <U n="sim_info">
        <V n="species" t="specified">
          <U n="specified">
            <L n="species">
              <E />
            </L>
          </U>
        </V>
        <E n="who">TargetSim</E> <!-- In this case, the target must be a human Sim (and not, for example, a cat or dog). -->
      </U>
    </V>
	<!-- And they must not have the following buffs -->
    <V t="buff">
      <U n="buff">
        <L n="blacklist">
          <T>39717<!--Buff: Buff_IsRunningMicrophoneSuper_NotVisible--></T> <!-- Can't drink from Sims using a microphone -->
          <T>141984<!--Buff: buff_Sim_SuppressTargetSimSocials_Hidden--></T> <!-- Or whom have their pie menu suppressed -->
        </L>
        <E n="subject">TargetSim</E>
      </U>
    </V>
	<!-- A test set is a list of conditions which must be satisfied. In this case, there is a predefined test-set which is used to determine whom is valid
		for drinking and when a vampire is allowed to drink. For example, pregnant Sims are not allowed to be drank from. Test sets are when there are lots of 
		conditions that are used for more than one interaction, and allows for code abstraction and organization. They in a sense serve the same purpose as a 
		function would in more "traditional" coding. -->
    <V t="test_set_reference">
      <T n="test_set_reference">150461<!--TestSetInstance: testSet_Vampires_CanDrink--></T>
    </V>
  </L>
  <T n="time_overhead">30</T>
</I>